.include ../beta.uasm
.include ../lab7macros.uasm
.include ../lab7checkoff.uasm

masks:
        0x00 0xFF 0xFF 0xFF
        0xFF 0x00 0xFF 0xFF
        0xFF 0xFF 0x00 0xFF
        0xFF 0xFF 0xFF 0x00

regs:   RESERVE(32)     | array used to store register contents

UI:
        save_all_regs(regs)

        LD(xp, -4, r0)
        extract_field(r0, 31, 26, r1)       | extract opcode
        CMPEQC(r1, 0x10, r2)
        BT(r2, LDB)                         | branch to LDB emulation
        CMPEQC(r1, 0x11, r2)
        BT(r2, STB)                         | branch to STB emulation

        LD(r31, regs, r0)
        LD(r31, regs+4, r1)
        LD(r31, regs+8, r2)
        BR(_IllegalInstruction)

LDB:
        LD(xp, -4, r0)
        extract_field(r0, 15, 0, r1)        | extract displacement
        SHLC(r1, 0b10000, r2)
        SRAC(r2, 0b10000, r3)               | sign extended displacement
        
        extract_field(r0, 20, 16, r4)       | extract Ra       
        MULC(r4, 4, r4)
        LD(r4, regs, r5)                    | read Ra
        ADD(r3, r5, r5)                     | effective address for LDB
        LD(r5, 0, r6)                       | read 4 bytes
        extract_field(r0, 25, 21, r7)       | read Rc
        MULC(r7, 4, r7)
        ST(r31, regs, r7)                   | initialize Rc

        extract_field(r5, 1, 0, r8)         | lower 2 bits of effective address
        CMPEQC(r8, 0x00, r9)                
        BEQ(r9, elif11, r10)
        extract_field(r6, 7, 0, r10)
        ST(r10, regs, r7)
        BR(RETURN)
elif11:
        CMPEQC(r8, 0x01, r9)                
        BEQ(r9, elif12, r10)
        extract_field(r6, 15, 8, r10)
        ST(r10, regs, r7)
        BR(RETURN)    
elif12:
        CMPEQC(r8, 0x02, r9)                
        BEQ(r9, else1, r10)
        extract_field(r6, 23, 16, r10)
        ST(r10, regs, r7)
        BR(RETURN)
else1:
        extract_field(r6, 31, 24, r10)
        ST(r10, regs, r7)
        BR(RETURN)

STB:
        LD(xp, -4, r0)
        extract_field(r0, 15, 0, r1)        | extract displacement
        SHLC(r1, 0b10000, r2)
        SRAC(r2, 0b10000, r3)               | sign extend displacement
        
        extract_field(r0, 20, 16, r4)       | extract Ra       
        MULC(r4, 4, r4)
        LD(r4, regs, r5)                    | read Ra
        ADD(r3, r5, r5)                     | effective address for STB
        LD(r5, 0, r6)                       | read 4 bytes

        extract_field(r0, 25, 21, r7)       | read Rc
        MULC(r7, 4, r7)
        LD(r7, regs, r7)                    | initialize Rc

        extract_field(r5, 1, 0, r8)         | lower 2 bits of effective address
        CMPEQC(r8, 0x00, r9)                
        BEQ(r9, elif21, r10)
        extract_field(r7, 7, 0, r10)
        LD(r31, masks, r11)
        AND(r6, r11, r6)
        OR(r6, r10, r6)
        ST(r6, 0, r5)
        BR(RETURN)
elif21:
        CMPEQC(r8, 0x01, r9)                
        BEQ(r9, elif22, r10)
        extract_field(r7, 7, 0, r10)
        SHLC(r10, 0b01000, r10)
        LD(r31, masks+4, r11)
        AND(r6, r11, r6)
        OR(r6, r10, r6)
        ST(r6, 0, r5)
        BR(RETURN)    
elif22:
        CMPEQC(r8, 0x02, r9)                
        BEQ(r9, else2, r10)
        extract_field(r7, 7, 0, r10)
        SHLC(r10, 0b10000, r10)
        LD(r31, masks+8, r11)
        AND(r6, r11, r6)
        OR(r6, r10, r6)
        ST(r6, 0, r5) 
        BR(RETURN)
else2:
        extract_field(r7, 7, 0, r10)
        SHLC(r10, 0b11000, r10)
        LD(r31, masks+12, r11)
        AND(r6, r11, r6)
        OR(r6, r10, r6)
        ST(r6, 0, r5)

RETURN:
        restore_all_regs(regs)
        JMP(xp)
